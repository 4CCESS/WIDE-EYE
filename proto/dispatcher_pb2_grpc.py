# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from proto import dispatcher_pb2 as proto_dot_dispatcher__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/dispatcher_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClientDispatcherStub(object):
    """-----------------------------------------------------------------------------
    Client-facing service: handles user registration, authentication, task creation,
    and result streaming between the client application and the dispatcher.
    -----------------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/wide_eye.ClientDispatcher/Register',
                request_serializer=proto_dot_dispatcher__pb2.RegisterRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/wide_eye.ClientDispatcher/Login',
                request_serializer=proto_dot_dispatcher__pb2.LoginRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.StartTask = channel.unary_unary(
                '/wide_eye.ClientDispatcher/StartTask',
                request_serializer=proto_dot_dispatcher__pb2.TaskRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.TaskStartResponse.FromString,
                _registered_method=True)
        self.StreamResults = channel.unary_stream(
                '/wide_eye.ClientDispatcher/StreamResults',
                request_serializer=proto_dot_dispatcher__pb2.TaskResultsRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.TaskResult.FromString,
                _registered_method=True)
        self.ListAvailableCategories = channel.unary_unary(
                '/wide_eye.ClientDispatcher/ListAvailableCategories',
                request_serializer=proto_dot_dispatcher__pb2.ListCategoriesRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.ListCategoriesResponse.FromString,
                _registered_method=True)
        self.ListAvailableLocations = channel.unary_unary(
                '/wide_eye.ClientDispatcher/ListAvailableLocations',
                request_serializer=proto_dot_dispatcher__pb2.ListLocationsRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.ListLocationsResponse.FromString,
                _registered_method=True)


class ClientDispatcherServicer(object):
    """-----------------------------------------------------------------------------
    Client-facing service: handles user registration, authentication, task creation,
    and result streaming between the client application and the dispatcher.
    -----------------------------------------------------------------------------
    """

    def Register(self, request, context):
        """Register a new user account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Authenticate an existing user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartTask(self, request, context):
        """Submit a new OSINT collection task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamResults(self, request, context):
        """Stream incremental results for a running task
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAvailableCategories(self, request, context):
        """Retrieve the list of available categories for tasks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAvailableLocations(self, request, context):
        """Retrieve the list of available locations for tasks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientDispatcherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=proto_dot_dispatcher__pb2.RegisterRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=proto_dot_dispatcher__pb2.LoginRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.LoginResponse.SerializeToString,
            ),
            'StartTask': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTask,
                    request_deserializer=proto_dot_dispatcher__pb2.TaskRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.TaskStartResponse.SerializeToString,
            ),
            'StreamResults': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamResults,
                    request_deserializer=proto_dot_dispatcher__pb2.TaskResultsRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.TaskResult.SerializeToString,
            ),
            'ListAvailableCategories': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAvailableCategories,
                    request_deserializer=proto_dot_dispatcher__pb2.ListCategoriesRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.ListCategoriesResponse.SerializeToString,
            ),
            'ListAvailableLocations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAvailableLocations,
                    request_deserializer=proto_dot_dispatcher__pb2.ListLocationsRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.ListLocationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wide_eye.ClientDispatcher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('wide_eye.ClientDispatcher', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientDispatcher(object):
    """-----------------------------------------------------------------------------
    Client-facing service: handles user registration, authentication, task creation,
    and result streaming between the client application and the dispatcher.
    -----------------------------------------------------------------------------
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wide_eye.ClientDispatcher/Register',
            proto_dot_dispatcher__pb2.RegisterRequest.SerializeToString,
            proto_dot_dispatcher__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wide_eye.ClientDispatcher/Login',
            proto_dot_dispatcher__pb2.LoginRequest.SerializeToString,
            proto_dot_dispatcher__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wide_eye.ClientDispatcher/StartTask',
            proto_dot_dispatcher__pb2.TaskRequest.SerializeToString,
            proto_dot_dispatcher__pb2.TaskStartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wide_eye.ClientDispatcher/StreamResults',
            proto_dot_dispatcher__pb2.TaskResultsRequest.SerializeToString,
            proto_dot_dispatcher__pb2.TaskResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAvailableCategories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wide_eye.ClientDispatcher/ListAvailableCategories',
            proto_dot_dispatcher__pb2.ListCategoriesRequest.SerializeToString,
            proto_dot_dispatcher__pb2.ListCategoriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAvailableLocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wide_eye.ClientDispatcher/ListAvailableLocations',
            proto_dot_dispatcher__pb2.ListLocationsRequest.SerializeToString,
            proto_dot_dispatcher__pb2.ListLocationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CollectorDispatcherStub(object):
    """-----------------------------------------------------------------------------
    Collector-facing service: manages collector registration, login, heartbeat,
    task assignment streaming, and result submission.
    -----------------------------------------------------------------------------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterCollector = channel.unary_unary(
                '/wide_eye.CollectorDispatcher/RegisterCollector',
                request_serializer=proto_dot_dispatcher__pb2.CollectorRegisterRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.CollectorRegisterResponse.FromString,
                _registered_method=True)
        self.LoginCollector = channel.unary_unary(
                '/wide_eye.CollectorDispatcher/LoginCollector',
                request_serializer=proto_dot_dispatcher__pb2.CollectorLoginRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.CollectorLoginResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/wide_eye.CollectorDispatcher/Heartbeat',
                request_serializer=proto_dot_dispatcher__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.StreamTasks = channel.unary_stream(
                '/wide_eye.CollectorDispatcher/StreamTasks',
                request_serializer=proto_dot_dispatcher__pb2.TaskStreamRequest.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.TaskAssignment.FromString,
                _registered_method=True)
        self.SubmitTaskResult = channel.unary_unary(
                '/wide_eye.CollectorDispatcher/SubmitTaskResult',
                request_serializer=proto_dot_dispatcher__pb2.CollectorTaskResult.SerializeToString,
                response_deserializer=proto_dot_dispatcher__pb2.CollectorTaskResultAck.FromString,
                _registered_method=True)


class CollectorDispatcherServicer(object):
    """-----------------------------------------------------------------------------
    Collector-facing service: manages collector registration, login, heartbeat,
    task assignment streaming, and result submission.
    -----------------------------------------------------------------------------
    """

    def RegisterCollector(self, request, context):
        """Register a new collector process with the dispatcher
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginCollector(self, request, context):
        """Authenticate a registered collector and obtain a session token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Send periodic health check to dispatcher
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTasks(self, request, context):
        """Receive a stream of task assignments from dispatcher
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitTaskResult(self, request, context):
        """Submit results from a completed task back to dispatcher
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectorDispatcherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterCollector': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterCollector,
                    request_deserializer=proto_dot_dispatcher__pb2.CollectorRegisterRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.CollectorRegisterResponse.SerializeToString,
            ),
            'LoginCollector': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginCollector,
                    request_deserializer=proto_dot_dispatcher__pb2.CollectorLoginRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.CollectorLoginResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=proto_dot_dispatcher__pb2.HeartbeatRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.HeartbeatResponse.SerializeToString,
            ),
            'StreamTasks': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTasks,
                    request_deserializer=proto_dot_dispatcher__pb2.TaskStreamRequest.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.TaskAssignment.SerializeToString,
            ),
            'SubmitTaskResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTaskResult,
                    request_deserializer=proto_dot_dispatcher__pb2.CollectorTaskResult.FromString,
                    response_serializer=proto_dot_dispatcher__pb2.CollectorTaskResultAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wide_eye.CollectorDispatcher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('wide_eye.CollectorDispatcher', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollectorDispatcher(object):
    """-----------------------------------------------------------------------------
    Collector-facing service: manages collector registration, login, heartbeat,
    task assignment streaming, and result submission.
    -----------------------------------------------------------------------------
    """

    @staticmethod
    def RegisterCollector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wide_eye.CollectorDispatcher/RegisterCollector',
            proto_dot_dispatcher__pb2.CollectorRegisterRequest.SerializeToString,
            proto_dot_dispatcher__pb2.CollectorRegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LoginCollector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wide_eye.CollectorDispatcher/LoginCollector',
            proto_dot_dispatcher__pb2.CollectorLoginRequest.SerializeToString,
            proto_dot_dispatcher__pb2.CollectorLoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wide_eye.CollectorDispatcher/Heartbeat',
            proto_dot_dispatcher__pb2.HeartbeatRequest.SerializeToString,
            proto_dot_dispatcher__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/wide_eye.CollectorDispatcher/StreamTasks',
            proto_dot_dispatcher__pb2.TaskStreamRequest.SerializeToString,
            proto_dot_dispatcher__pb2.TaskAssignment.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitTaskResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/wide_eye.CollectorDispatcher/SubmitTaskResult',
            proto_dot_dispatcher__pb2.CollectorTaskResult.SerializeToString,
            proto_dot_dispatcher__pb2.CollectorTaskResultAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
